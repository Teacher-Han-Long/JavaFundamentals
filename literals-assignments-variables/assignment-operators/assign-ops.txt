1. Basically, what is a variable?
2. What is in an object holder, Button b = new Button(); ?
3. The way object references are stored are __________specific.
4. If an object reference variable is not assigned a value, or has
been explicitly assigned a value of null, the variable holds
bits representing ______.

Primitive Assignments
---------------------
5. You can assign a primitive variable using a ____ or ___________.
6. What does the compiler do with this assignment?
byte b = 27;

7. byte a = 3;
   byte b = 8;
   byte c = a + b;   What happens?
8. Fix the above code.

Primitive Casting
-------------------
9.  Typically, an implicit cast happens when you're doing a _____ ______.
10. The large value into small container conversion is referred to as
_________ and requires an _________ cast. Give examples of 9 and 10.

11. See examples in Casting.java file

Assigning a Literal That Is Too Large for the Variable
---------------------------------------------------------
12. What is the result and why?
byte a = 128;
byte a = (byte) 128;

Compound Assignment Operator
------------------------------
13. byte b = 3;
    b += 7;          This is equivalent to : 

14. What is the advantage of using compound assignment operators?
    +=, -+, *=, /=

Assigning One Primitive Variable to Another Primitive Variable
--------------------------------------------------------------
15. What happens here?
int a = 6; // ?
int b = a; // ?

16. Look at example in ValueTest.java. Explain the output.
_________________________________________________________________________

ANSWERS:
1. a bit holder with a designated type
YOu can have an int holder, double holder, Button, String[], etc.
Within that holder, a bunch of bits representing the value.
A byte with a value of 6, the bit pattern in the variable(holder)
is 00000110, = 8 bits.

2. A variable referring to an object is just that. A reference variable
bit holder contains bits representing a way to get to the object. We don't
know the format. The variable's value is not the object, but rather a value
representing a specific object on the heap. 

3. VM
4. null

5. literal,  the result of an expression
int x = 7;       //literal assignment
int x = x + 2;   //assignment with an expression(including a literal)
int z = x + y;   //assignment with an expression

6. byte b = (byte) 27 - automatically narrows the literal to a byte

7. CE: possible loss of presicion, found int, required byte
int or smaller expressions always result in an int.
8. byte c = (byte) (a + b);

9. a widening conversion
   int a = 100;   long b = a;
   double d = 100L;
10. float a = 100.001f;    int b = (int)a;
  
11. See examples in Casting.java file

12. CE: possible loss of precision
    -128   Java truncates the higher-order bits that won't fit.
    128 is the bit pattern 10000000. It takes a full 8 bits
    to represent 128. ints are 32 bits, so
    128 = 00000000000000000000000010000000. 24 bits chopped off.
    The MSB is now 1 (negative).

13. byte b = 3;
    b = (byte) (b + 7)

14. it allows you to +, -, /, * without an explicit cast.

15. The bit pattern for the number 6 is assigned to int variable a.
    Then the bit pattern in a is copied, and the copy is placed in b.
